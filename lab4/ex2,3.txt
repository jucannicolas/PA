#include <stdio.h>
#include <stdlib.h>
typedef struct node
{
    int key;
    struct node *left,*right;
}Nod_arbore;

int max(int a,int b)
{
    return a>b?a:b;
}
Nod_arbore *createBinTreeFromFile(FILE* f) ///pb1 ex1
{

    int c;
    fscanf(f,"%d",&c);
    if(c==0) return NULL;
    Nod_arbore  *p=(Nod_arbore*)malloc(sizeof(Nod_arbore));
    if(p==NULL)
        exit(1);
    p->key=c;
    p->left=createBinTreeFromFile(f);
    p->right=createBinTreeFromFile(f);
    return p;
}
void preordine(Nod_arbore *p) ///pb1 ex2
{
    if(p!=NULL)
    {
        printf("%d ",p->key);
        preordine(p->left);
        preordine(p->right);
    }
}
void schimba_subarbori(Nod_arbore *p) ///ex2
{
    Nod_arbore *aux=p->right;
    p->right=p->left;
    p->left=aux;
}
void adancime_arbore(Nod_arbore *root,int adancime,int *maxim) ///ex3 metoda 1
{
    if(root==NULL)
    {
        return;
    }
    adancime++;
    if(adancime>*maxim) *maxim=adancime;
    adancime_arbore(root->left,adancime,maxim);
    adancime_arbore(root->right,adancime,maxim);
}
int adancime_arbore2(Nod_arbore *root) ///ex3 metoda 2
{
    if(root==NULL) return 0;
    int adacime_stanga=adancime_arbore2(root->left);
    int adacime_dreapta=adancime_arbore2(root->right);
    return max(adacime_dreapta,adacime_stanga)+1;
}


int main()
{
    Nod_arbore *root;
    FILE *f=fopen("ArboreBinar.txt","r");
    if(!f)
    {
        printf("Nu se poate deschide fisierul");
        return -1;
    }
    root=createBinTreeFromFile(f);
    preordine(root);
    printf("\n");
    /*
    schimba_subarbori(root);
    preordine(root);
    int adancime=0;
    adancime_arbore(root,-1,&adancime);
    printf("\nAdancimea arborelui este %d",adancime);
    printf("\nAdancimea arborelui este %d",adancime_arbore2(root)-1);
    */



    return 0;
}
