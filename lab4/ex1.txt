#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
typedef struct node
{
    int key;
    struct node *left,*right;
}Nod_arbore;
int max(int a,int b)
{
    return a>b?a:b;
}

Nod_arbore *createBinTreeFromFile(FILE* f) ///pb1 ex1
{

    int c;
    fscanf(f,"%d",&c);
    if(c==0) return NULL;
    Nod_arbore  *p=(Nod_arbore*)malloc(sizeof(Nod_arbore));
    if(p==NULL)
        exit(1);
    p->key=c;
    p->left=createBinTreeFromFile(f);
    p->right=createBinTreeFromFile(f);
    return p;
}
void preordine(Nod_arbore *p) ///pb1 ex2
{
    if(p!=NULL)
    {
        printf("%d ",p->key);
        preordine(p->left);
        preordine(p->right);
    }
}
void inordine(Nod_arbore *p)
{
    if(p!=NULL)
    {
        inordine(p->left);
        printf("%d ",p->key);
        inordine(p->right);
    }
}
void postordine(Nod_arbore *p)
{
    if(p!=NULL)
    {
        postordine(p->left);
        postordine(p->right);
        printf("%d ",p->key);
    }
}
int leaf_node(Nod_arbore *p) ///pb1 ex3
{
    if(p==NULL) return 0;
    if(p->left==NULL && p->right==NULL)
        {
            printf("%d ",p->key);
            return 1;
        }
    return leaf_node(p->left)+leaf_node(p->right);
}
void intern_node(Nod_arbore *p,int *c) ///pb1 ex4
{
    if(p==NULL) return 0;
    if(p->right!=NULL || p->left!=NULL)
        {
            printf("%d ",p->key);
            *c=*c+1;///(*c)++;
        }
    intern_node(p->left,c);
    intern_node(p->right,c);
}
int inaltime_arbore(Nod_arbore *p)///pb1 ex5
{
    if(p==NULL) return -1;
    return 1+max(inaltime_arbore(p->left),inaltime_arbore(p->right));
}
Nod_arbore * search(Nod_arbore *root, int key)///pb1 ex6
{
    if(root==NULL) return NULL;
    if(root->key==key) return root;
    Nod_arbore *p=search(root->left,key);
    if(p) return p;

    return search(root->right,key);
}
Nod_arbore *creBalBinTree(int nr_noduri) ///pb1 ex7
{
    if(nr_noduri<=0) return NULL;
    int nrLeft=0,nrRight=0;
    nrLeft=nr_noduri/2;
    nrRight=nr_noduri-nrLeft-1;
    Nod_arbore *p=(Nod_arbore *)malloc(sizeof(Nod_arbore));
    printf("Introduceti id-ul nodului:");
    scanf("%d",&(p->key));
    p->left=creBalBinTree(nrLeft);
    p->right=creBalBinTree(nrRight);
    return p;
}
int main()
{
    /*
    Nod_arbore *root;
    FILE *f=fopen("ArboreBinar.txt","r");
    if(!f)
    {
        printf("Nu se poate deschide fisierul");
        return -1;
    }
    root=createBinTreeFromFile(f);
    preordine(root);
    printf("\n");
    inordine(root);
    printf("\n");
    postordine(root);
    printf("\n");
    printf("\nSunt %d frunze",leaf_node(root));
    printf("\n");
    int nr_nod_interne=0;
    intern_node(root,&nr_nod_interne);
    printf("\nSunt %d noduri interne",nr_nod_interne);
    printf("\nInaltime arbore:%d",inaltime_arbore(root));
    Nod_arbore *p=search(root,2);
    printf("\nInaltime nod cautat:%d",inaltime_arbore(p));
    */
    int nr_noduri=7;
    Nod_arbore *root=creBalBinTree(7);
    inordine(root);
    return 0;
}
